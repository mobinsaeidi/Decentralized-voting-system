// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

contract VotingContract {
    struct Candidate {
        uint256 id;
        string name;
        uint256 voteCount;
        bool exists;
    }

    struct Voter {
        bool hasVoted;
        uint256 votedCandidateId;
    }

    address public owner;
    mapping(uint256 => Candidate) public candidates;
    mapping(address => Voter) public voters;
    uint256 public candidatesCount;
    bool public votingOpen;

    event VoteCasted(uint256 indexed candidateId, address indexed voter);
    event CandidateAdded(uint256 indexed candidateId, string name);
    event VotingStatusChanged(bool status);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }

    modifier votingIsOpen() {
        require(votingOpen, "Voting is currently closed");
        _;
    }

    constructor() {
        owner = msg.sender;
        votingOpen = false;
    }

    function addCandidate(string memory _name) public onlyOwner {
        require(!votingOpen, "Cannot add candidates while voting is open");
        candidatesCount++;
        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0, true);
        emit CandidateAdded(candidatesCount, _name);
    }

    function vote(uint256 _candidateId) public votingIsOpen {
        require(!voters[msg.sender].hasVoted, "You have already voted");
        require(candidates[_candidateId].exists, "Invalid candidate");

        voters[msg.sender] = Voter(true, _candidateId);
        candidates[_candidateId].voteCount++;
        emit VoteCasted(_candidateId, msg.sender);
    }

    function setVotingStatus(bool _status) public onlyOwner {
        votingOpen = _status;
        emit VotingStatusChanged(_status);
    }

    function getCandidate(uint256 _candidateId) public view returns (uint256, string memory, uint256) {
        require(candidates[_candidateId].exists, "Invalid candidate");
        Candidate memory candidate = candidates[_candidateId];
        return (candidate.id, candidate.name, candidate.voteCount);
    }

    function hasVoted(address _voter) public view returns (bool) {
        return voters[_voter].hasVoted;
    }

    function getVotingStatus() public view returns (bool) {
        return votingOpen;
    }
}
